// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: roles.sql

package db

import (
	"context"
	"database/sql"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    name, level, created_by
) values (
    $1, $2, $3
) RETURNING id, name, level, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type CreateRoleParams struct {
	Name      string        `json:"name"`
	Level     int16         `json:"level"`
	CreatedBy sql.NullInt64 `json:"created_by"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.Name, arg.Level, arg.CreatedBy)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, name, level, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const listRole = `-- name: ListRole :many
SELECT id, name, level, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM roles
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListRoleParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRole(ctx context.Context, arg ListRoleParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, listRole, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Level,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInactiveRole = `-- name: UpdateInactiveRole :one
UPDATE roles SET deleted_by = $2, deleted_at = now() WHERE id = $1
RETURNING id, name, level, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateInactiveRoleParams struct {
	ID        int64         `json:"id"`
	DeletedBy sql.NullInt64 `json:"deleted_by"`
}

func (q *Queries) UpdateInactiveRole(ctx context.Context, arg UpdateInactiveRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateInactiveRole, arg.ID, arg.DeletedBy)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET
    name = $2,
    level = $3,
    updated_by = $4,
    updated_at = now()
WHERE
    id = $1
RETURNING id, name, level, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateRoleParams struct {
	ID        int64         `json:"id"`
	Name      string        `json:"name"`
	Level     int16         `json:"level"`
	UpdatedBy sql.NullInt64 `json:"updated_by"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole,
		arg.ID,
		arg.Name,
		arg.Level,
		arg.UpdatedBy,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}
