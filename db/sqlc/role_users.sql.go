// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: role_users.sql

package db

import (
	"context"
	"database/sql"
)

const createRoleUser = `-- name: CreateRoleUser :one
INSERT INTO role_users (
    role_id, user_id, created_by
) values (
             $1, $2, $3
         ) RETURNING id, role_id, user_id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type CreateRoleUserParams struct {
	RoleID    int64         `json:"role_id"`
	UserID    int64         `json:"user_id"`
	CreatedBy sql.NullInt64 `json:"created_by"`
}

func (q *Queries) CreateRoleUser(ctx context.Context, arg CreateRoleUserParams) (RoleUser, error) {
	row := q.db.QueryRowContext(ctx, createRoleUser, arg.RoleID, arg.UserID, arg.CreatedBy)
	var i RoleUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const deleteRoleUser = `-- name: DeleteRoleUser :exec
DELETE FROM role_users
WHERE id = $1
`

func (q *Queries) DeleteRoleUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRoleUser, id)
	return err
}

const getRoleUserByID = `-- name: GetRoleUserByID :one
SELECT id, role_id, user_id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM role_users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoleUserByID(ctx context.Context, id int64) (RoleUser, error) {
	row := q.db.QueryRowContext(ctx, getRoleUserByID, id)
	var i RoleUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const getRoleUserByRoleID = `-- name: GetRoleUserByRoleID :many
SELECT id, role_id, user_id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM role_users
WHERE
    role_id = $1
LIMIT $2
OFFSET $3
`

type GetRoleUserByRoleIDParams struct {
	RoleID int64 `json:"role_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRoleUserByRoleID(ctx context.Context, arg GetRoleUserByRoleIDParams) ([]RoleUser, error) {
	rows, err := q.db.QueryContext(ctx, getRoleUserByRoleID, arg.RoleID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleUser
	for rows.Next() {
		var i RoleUser
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleUserByUserID = `-- name: GetRoleUserByUserID :many
SELECT id, role_id, user_id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM role_users
WHERE
    user_id = $1
LIMIT $2
OFFSET $3
`

type GetRoleUserByUserIDParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRoleUserByUserID(ctx context.Context, arg GetRoleUserByUserIDParams) ([]RoleUser, error) {
	rows, err := q.db.QueryContext(ctx, getRoleUserByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleUser
	for rows.Next() {
		var i RoleUser
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoleUser = `-- name: ListRoleUser :many
SELECT id, role_id, user_id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM role_users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRoleUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoleUser(ctx context.Context, arg ListRoleUserParams) ([]RoleUser, error) {
	rows, err := q.db.QueryContext(ctx, listRoleUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoleUser
	for rows.Next() {
		var i RoleUser
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInactiveRoleUser = `-- name: UpdateInactiveRoleUser :one
UPDATE role_users SET deleted_by = $2, deleted_at = now() WHERE id = $1
RETURNING id, role_id, user_id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateInactiveRoleUserParams struct {
	ID        int64         `json:"id"`
	DeletedBy sql.NullInt64 `json:"deleted_by"`
}

func (q *Queries) UpdateInactiveRoleUser(ctx context.Context, arg UpdateInactiveRoleUserParams) (RoleUser, error) {
	row := q.db.QueryRowContext(ctx, updateInactiveRoleUser, arg.ID, arg.DeletedBy)
	var i RoleUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const updateRoleUser = `-- name: UpdateRoleUser :one
UPDATE role_users
SET
    user_id = $2,
    role_id = $3,
    updated_by = $4,
    updated_at = now()
WHERE
    id = $1
    RETURNING id, role_id, user_id, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateRoleUserParams struct {
	ID        int64         `json:"id"`
	UserID    int64         `json:"user_id"`
	RoleID    int64         `json:"role_id"`
	UpdatedBy sql.NullInt64 `json:"updated_by"`
}

func (q *Queries) UpdateRoleUser(ctx context.Context, arg UpdateRoleUserParams) (RoleUser, error) {
	row := q.db.QueryRowContext(ctx, updateRoleUser,
		arg.ID,
		arg.UserID,
		arg.RoleID,
		arg.UpdatedBy,
	)
	var i RoleUser
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}
