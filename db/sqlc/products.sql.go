// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: products.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    cat_id, name, amount, provider_id, provider_code, status, parent, created_by
) values (
             $1, $2, $3, $4, $5, $6, $7, $8
         ) RETURNING id, cat_id, name, amount, provider_id, provider_code, status, parent, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type CreateProductParams struct {
	CatID        int64         `json:"cat_id"`
	Name         string        `json:"name"`
	Amount       string        `json:"amount"`
	ProviderID   int64         `json:"provider_id"`
	ProviderCode string        `json:"provider_code"`
	Status       string        `json:"status"`
	Parent       int64         `json:"parent"`
	CreatedBy    sql.NullInt64 `json:"created_by"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.CatID,
		arg.Name,
		arg.Amount,
		arg.ProviderID,
		arg.ProviderCode,
		arg.Status,
		arg.Parent,
		arg.CreatedBy,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CatID,
		&i.Name,
		&i.Amount,
		&i.ProviderID,
		&i.ProviderCode,
		&i.Status,
		&i.Parent,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, cat_id, name, amount, provider_id, provider_code, status, parent, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM products
WHERE id = $1 AND deleted_at is null LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CatID,
		&i.Name,
		&i.Amount,
		&i.ProviderID,
		&i.ProviderCode,
		&i.Status,
		&i.Parent,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, cat_id, name, amount, provider_id, provider_code, status, parent, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM products
WHERE deleted_at is null
AND (CASE WHEN $3::bool THEN cat_id = $4 ELSE TRUE END)
AND (CASE WHEN $5::bool THEN provider_id = $6 ELSE TRUE END)
ORDER BY split_part(name, ' ', 1) desc, amount
LIMIT $1
OFFSET $2
`

type ListProductParams struct {
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
	IsCat      bool  `json:"is_cat"`
	CatID      int64 `json:"cat_id"`
	IsProv     bool  `json:"is_prov"`
	ProviderID int64 `json:"provider_id"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct,
		arg.Limit,
		arg.Offset,
		arg.IsCat,
		arg.CatID,
		arg.IsProv,
		arg.ProviderID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CatID,
			&i.Name,
			&i.Amount,
			&i.ProviderID,
			&i.ProviderCode,
			&i.Status,
			&i.Parent,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductByCatID = `-- name: ListProductByCatID :many
SELECT id, cat_id, name, amount, provider_id, provider_code, status, parent, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM products
WHERE cat_id = $1
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListProductByCatIDParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProductByCatID(ctx context.Context, arg ListProductByCatIDParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductByCatID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CatID,
			&i.Name,
			&i.Amount,
			&i.ProviderID,
			&i.ProviderCode,
			&i.Status,
			&i.Parent,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInactiveProduct = `-- name: UpdateInactiveProduct :one
UPDATE products SET deleted_by = $2, deleted_at = now() WHERE id = $1
RETURNING id, cat_id, name, amount, provider_id, provider_code, status, parent, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateInactiveProductParams struct {
	ID        int64         `json:"id"`
	DeletedBy sql.NullInt64 `json:"deleted_by"`
}

func (q *Queries) UpdateInactiveProduct(ctx context.Context, arg UpdateInactiveProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateInactiveProduct, arg.ID, arg.DeletedBy)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CatID,
		&i.Name,
		&i.Amount,
		&i.ProviderID,
		&i.ProviderCode,
		&i.Status,
		&i.Parent,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    name = CASE
            WHEN $1::bool
                THEN $2
            ELSE name
            END,
    cat_id = CASE
               WHEN $3::bool
                THEN $4
               ELSE cat_id
                END,
    "amount" = CASE
                 WHEN $5::bool
                    THEN $6
                 ELSE amount::DECIMAL
                END,
    provider_id = CASE
                 WHEN $7::bool
                    THEN $8
                 ELSE provider_id
                END,
    provider_code = CASE
                 WHEN $9::bool
                    THEN $10
                 ELSE provider_code
                END,
    status = CASE
                      WHEN $11::bool
                    THEN $12
                      ELSE status
        END,
    parent = CASE
              WHEN $13::bool
                THEN $14
              ELSE parent
              END,
    updated_by = $15,
    updated_at = now()
WHERE
    id = $16
RETURNING id, cat_id, name, amount, provider_id, provider_code, status, parent, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateProductParams struct {
	SetName         bool          `json:"set_name"`
	Name            string        `json:"name"`
	SetCat          bool          `json:"set_cat"`
	CatID           int64         `json:"cat_id"`
	SetAmount       bool          `json:"set_amount"`
	Amount          string        `json:"amount"`
	SetProvider     bool          `json:"set_provider"`
	ProviderID      int64         `json:"provider_id"`
	SetProviderCode bool          `json:"set_provider_code"`
	ProviderCode    string        `json:"provider_code"`
	SetStatus       bool          `json:"set_status"`
	Status          string        `json:"status"`
	SetParent       bool          `json:"set_parent"`
	Parent          int64         `json:"parent"`
	UpdatedBy       sql.NullInt64 `json:"updated_by"`
	ID              int64         `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.SetName,
		arg.Name,
		arg.SetCat,
		arg.CatID,
		arg.SetAmount,
		arg.Amount,
		arg.SetProvider,
		arg.ProviderID,
		arg.SetProviderCode,
		arg.ProviderCode,
		arg.SetStatus,
		arg.Status,
		arg.SetParent,
		arg.Parent,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CatID,
		&i.Name,
		&i.Amount,
		&i.ProviderID,
		&i.ProviderCode,
		&i.Status,
		&i.Parent,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}
