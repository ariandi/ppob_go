// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: providers.sql

package db

import (
	"context"
	"database/sql"
)

const createProvider = `-- name: CreateProvider :one
INSERT INTO providers (
    name, "user", secret, add_info1, add_info2, valid_from, valid_to, base_url, "method", inq,
    pay, adv, cmt, rev, status, created_by, created_at
) values (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, now()
         ) RETURNING id, name, "user", secret, add_info1, add_info2, valid_from, valid_to, base_url, method, inq, pay, adv, cmt, rev, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type CreateProviderParams struct {
	Name      string         `json:"name"`
	User      string         `json:"user"`
	Secret    string         `json:"secret"`
	AddInfo1  string         `json:"add_info1"`
	AddInfo2  string         `json:"add_info2"`
	ValidFrom sql.NullTime   `json:"valid_from"`
	ValidTo   sql.NullTime   `json:"valid_to"`
	BaseUrl   sql.NullString `json:"base_url"`
	Method    sql.NullString `json:"method"`
	Inq       sql.NullString `json:"inq"`
	Pay       sql.NullString `json:"pay"`
	Adv       sql.NullString `json:"adv"`
	Cmt       sql.NullString `json:"cmt"`
	Rev       sql.NullString `json:"rev"`
	Status    string         `json:"status"`
	CreatedBy sql.NullInt64  `json:"created_by"`
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (Provider, error) {
	row := q.db.QueryRowContext(ctx, createProvider,
		arg.Name,
		arg.User,
		arg.Secret,
		arg.AddInfo1,
		arg.AddInfo2,
		arg.ValidFrom,
		arg.ValidTo,
		arg.BaseUrl,
		arg.Method,
		arg.Inq,
		arg.Pay,
		arg.Adv,
		arg.Cmt,
		arg.Rev,
		arg.Status,
		arg.CreatedBy,
	)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.User,
		&i.Secret,
		&i.AddInfo1,
		&i.AddInfo2,
		&i.ValidFrom,
		&i.ValidTo,
		&i.BaseUrl,
		&i.Method,
		&i.Inq,
		&i.Pay,
		&i.Adv,
		&i.Cmt,
		&i.Rev,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const deleteProvider = `-- name: DeleteProvider :exec
DELETE FROM providers
WHERE id = $1
`

func (q *Queries) DeleteProvider(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProvider, id)
	return err
}

const getProvider = `-- name: GetProvider :one
SELECT id, name, "user", secret, add_info1, add_info2, valid_from, valid_to, base_url, method, inq, pay, adv, cmt, rev, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM providers
WHERE id = $1 AND deleted_at is null LIMIT 1
`

func (q *Queries) GetProvider(ctx context.Context, id int64) (Provider, error) {
	row := q.db.QueryRowContext(ctx, getProvider, id)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.User,
		&i.Secret,
		&i.AddInfo1,
		&i.AddInfo2,
		&i.ValidFrom,
		&i.ValidTo,
		&i.BaseUrl,
		&i.Method,
		&i.Inq,
		&i.Pay,
		&i.Adv,
		&i.Cmt,
		&i.Rev,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const listProvider = `-- name: ListProvider :many
SELECT id, name, "user", secret, add_info1, add_info2, valid_from, valid_to, base_url, method, inq, pay, adv, cmt, rev, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM providers
WHERE deleted_at is null
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListProviderParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProvider(ctx context.Context, arg ListProviderParams) ([]Provider, error) {
	rows, err := q.db.QueryContext(ctx, listProvider, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Provider{}
	for rows.Next() {
		var i Provider
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.User,
			&i.Secret,
			&i.AddInfo1,
			&i.AddInfo2,
			&i.ValidFrom,
			&i.ValidTo,
			&i.BaseUrl,
			&i.Method,
			&i.Inq,
			&i.Pay,
			&i.Adv,
			&i.Cmt,
			&i.Rev,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInactiveProvider = `-- name: UpdateInactiveProvider :one
UPDATE providers SET deleted_by = $2, deleted_at = now() WHERE id = $1
RETURNING id, name, "user", secret, add_info1, add_info2, valid_from, valid_to, base_url, method, inq, pay, adv, cmt, rev, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateInactiveProviderParams struct {
	ID        int64         `json:"id"`
	DeletedBy sql.NullInt64 `json:"deleted_by"`
}

func (q *Queries) UpdateInactiveProvider(ctx context.Context, arg UpdateInactiveProviderParams) (Provider, error) {
	row := q.db.QueryRowContext(ctx, updateInactiveProvider, arg.ID, arg.DeletedBy)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.User,
		&i.Secret,
		&i.AddInfo1,
		&i.AddInfo2,
		&i.ValidFrom,
		&i.ValidTo,
		&i.BaseUrl,
		&i.Method,
		&i.Inq,
		&i.Pay,
		&i.Adv,
		&i.Cmt,
		&i.Rev,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const updateProvider = `-- name: UpdateProvider :one
UPDATE providers
SET
    "name" = CASE
            WHEN $1::bool
                THEN $2
            ELSE name
            END,
    "user" = CASE
               WHEN $3::bool
                THEN $4
               ELSE "user"
        END,
    secret = CASE
                 WHEN $5::bool
                    THEN $6
                 ELSE secret
        END,
    add_info1 = CASE
                 WHEN $7::bool
                    THEN $8
                 ELSE add_info1
        END,
    add_info2 = CASE
                    WHEN $9::bool
                    THEN $10
                    ELSE add_info2
        END,
    valid_from = CASE
                    WHEN $11::bool
                    THEN $12
                    ELSE valid_from
        END,
    valid_to = CASE
                     WHEN $13::bool
                    THEN $14
                     ELSE valid_to
        END,
    base_url = CASE
                   WHEN $15::bool
                    THEN $16
                   ELSE base_url
        END,
    method = CASE
                   WHEN $17::bool
                    THEN $18
                   ELSE method
        END,
    inq = CASE
                 WHEN $19::bool
                    THEN $20
                 ELSE inq
        END,
    pay = CASE
              WHEN $21::bool
                    THEN $22
              ELSE pay
        END,
    adv = CASE
              WHEN $23::bool
                    THEN $24
              ELSE adv
        END,
    cmt = CASE
              WHEN $25::bool
                    THEN $26
              ELSE cmt
        END,
    rev = CASE
              WHEN $27::bool
                    THEN $28
              ELSE rev
        END,
    status = CASE
                      WHEN $29::bool
                    THEN $30
                      ELSE status
        END,
    updated_by = $31,
    updated_at = now()
WHERE
    id = $32
RETURNING id, name, "user", secret, add_info1, add_info2, valid_from, valid_to, base_url, method, inq, pay, adv, cmt, rev, status, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateProviderParams struct {
	SetName      bool           `json:"set_name"`
	Name         string         `json:"name"`
	SetUser      bool           `json:"set_user"`
	UserParams   string         `json:"user_params"`
	SetSecret    bool           `json:"set_secret"`
	Secret       string         `json:"secret"`
	SetAddInfo1  bool           `json:"set_add_info1"`
	AddInfo1     string         `json:"add_info1"`
	SetAddInfo2  bool           `json:"set_add_info2"`
	AddInfo2     string         `json:"add_info2"`
	SetValidFrom bool           `json:"set_valid_from"`
	ValidFrom    sql.NullTime   `json:"valid_from"`
	SetValidTo   bool           `json:"set_valid_to"`
	ValidTo      sql.NullTime   `json:"valid_to"`
	SetBaseUrl   bool           `json:"set_base_url"`
	BaseUrl      sql.NullString `json:"base_url"`
	SetMethod    bool           `json:"set_method"`
	Method       sql.NullString `json:"method"`
	SetInq       bool           `json:"set_inq"`
	Inq          sql.NullString `json:"inq"`
	SetPay       bool           `json:"set_pay"`
	Pay          sql.NullString `json:"pay"`
	SetAdv       bool           `json:"set_adv"`
	Adv          sql.NullString `json:"adv"`
	SetCmt       bool           `json:"set_cmt"`
	Cmt          sql.NullString `json:"cmt"`
	SetRev       bool           `json:"set_rev"`
	Rev          sql.NullString `json:"rev"`
	SetStatus    bool           `json:"set_status"`
	Status       string         `json:"status"`
	UpdatedBy    sql.NullInt64  `json:"updated_by"`
	ID           int64          `json:"id"`
}

func (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) (Provider, error) {
	row := q.db.QueryRowContext(ctx, updateProvider,
		arg.SetName,
		arg.Name,
		arg.SetUser,
		arg.UserParams,
		arg.SetSecret,
		arg.Secret,
		arg.SetAddInfo1,
		arg.AddInfo1,
		arg.SetAddInfo2,
		arg.AddInfo2,
		arg.SetValidFrom,
		arg.ValidFrom,
		arg.SetValidTo,
		arg.ValidTo,
		arg.SetBaseUrl,
		arg.BaseUrl,
		arg.SetMethod,
		arg.Method,
		arg.SetInq,
		arg.Inq,
		arg.SetPay,
		arg.Pay,
		arg.SetAdv,
		arg.Adv,
		arg.SetCmt,
		arg.Cmt,
		arg.SetRev,
		arg.Rev,
		arg.SetStatus,
		arg.Status,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Provider
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.User,
		&i.Secret,
		&i.AddInfo1,
		&i.AddInfo2,
		&i.ValidFrom,
		&i.ValidTo,
		&i.BaseUrl,
		&i.Method,
		&i.Inq,
		&i.Pay,
		&i.Adv,
		&i.Cmt,
		&i.Rev,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}
