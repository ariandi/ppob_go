// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: transactions.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "transactions" (
    tx_id, "bill_id", cust_name, amount, "admin", tot_amount, fee_partner, fee_ppob, valid_from, valid_to,
    cat_id, cat_name, prod_id, prod_name, partner_id, partner_name, provider_id, provider_name,
    status, req_inq_params, res_inq_params, req_pay_params, res_pay_params,
    req_cmt_params, res_cmt_params, req_adv_params, res_adv_params, req_rev_params, res_rev_params,
    created_by, created_at
) values (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16,
            $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, now()
         ) RETURNING id, tx_id, bill_id, cust_name, amount, admin, tot_amount, fee_partner, fee_ppob, valid_from, valid_to, cat_id, cat_name, prod_id, prod_name, partner_id, partner_name, provider_id, provider_name, status, req_inq_params, res_inq_params, req_pay_params, res_pay_params, req_cmt_params, res_cmt_params, req_adv_params, res_adv_params, req_rev_params, res_rev_params, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type CreateTransactionParams struct {
	TxID         string         `json:"tx_id"`
	BillID       string         `json:"bill_id"`
	CustName     sql.NullString `json:"cust_name"`
	Amount       sql.NullString `json:"amount"`
	Admin        sql.NullString `json:"admin"`
	TotAmount    sql.NullString `json:"tot_amount"`
	FeePartner   sql.NullString `json:"fee_partner"`
	FeePpob      sql.NullString `json:"fee_ppob"`
	ValidFrom    sql.NullTime   `json:"valid_from"`
	ValidTo      sql.NullTime   `json:"valid_to"`
	CatID        sql.NullInt64  `json:"cat_id"`
	CatName      sql.NullString `json:"cat_name"`
	ProdID       sql.NullInt64  `json:"prod_id"`
	ProdName     sql.NullString `json:"prod_name"`
	PartnerID    sql.NullInt64  `json:"partner_id"`
	PartnerName  sql.NullString `json:"partner_name"`
	ProviderID   sql.NullInt64  `json:"provider_id"`
	ProviderName sql.NullString `json:"provider_name"`
	Status       string         `json:"status"`
	ReqInqParams sql.NullString `json:"req_inq_params"`
	ResInqParams sql.NullString `json:"res_inq_params"`
	ReqPayParams sql.NullString `json:"req_pay_params"`
	ResPayParams sql.NullString `json:"res_pay_params"`
	ReqCmtParams sql.NullString `json:"req_cmt_params"`
	ResCmtParams sql.NullString `json:"res_cmt_params"`
	ReqAdvParams sql.NullString `json:"req_adv_params"`
	ResAdvParams sql.NullString `json:"res_adv_params"`
	ReqRevParams sql.NullString `json:"req_rev_params"`
	ResRevParams sql.NullString `json:"res_rev_params"`
	CreatedBy    sql.NullInt64  `json:"created_by"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.TxID,
		arg.BillID,
		arg.CustName,
		arg.Amount,
		arg.Admin,
		arg.TotAmount,
		arg.FeePartner,
		arg.FeePpob,
		arg.ValidFrom,
		arg.ValidTo,
		arg.CatID,
		arg.CatName,
		arg.ProdID,
		arg.ProdName,
		arg.PartnerID,
		arg.PartnerName,
		arg.ProviderID,
		arg.ProviderName,
		arg.Status,
		arg.ReqInqParams,
		arg.ResInqParams,
		arg.ReqPayParams,
		arg.ResPayParams,
		arg.ReqCmtParams,
		arg.ResCmtParams,
		arg.ReqAdvParams,
		arg.ResAdvParams,
		arg.ReqRevParams,
		arg.ResRevParams,
		arg.CreatedBy,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.BillID,
		&i.CustName,
		&i.Amount,
		&i.Admin,
		&i.TotAmount,
		&i.FeePartner,
		&i.FeePpob,
		&i.ValidFrom,
		&i.ValidTo,
		&i.CatID,
		&i.CatName,
		&i.ProdID,
		&i.ProdName,
		&i.PartnerID,
		&i.PartnerName,
		&i.ProviderID,
		&i.ProviderName,
		&i.Status,
		&i.ReqInqParams,
		&i.ResInqParams,
		&i.ReqPayParams,
		&i.ResPayParams,
		&i.ReqCmtParams,
		&i.ResCmtParams,
		&i.ReqAdvParams,
		&i.ResAdvParams,
		&i.ReqRevParams,
		&i.ResRevParams,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM "transactions"
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, tx_id, bill_id, cust_name, amount, admin, tot_amount, fee_partner, fee_ppob, valid_from, valid_to, cat_id, cat_name, prod_id, prod_name, partner_id, partner_name, provider_id, provider_name, status, req_inq_params, res_inq_params, req_pay_params, res_pay_params, req_cmt_params, res_cmt_params, req_adv_params, res_adv_params, req_rev_params, res_rev_params, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM "transactions"
WHERE id = $1 AND deleted_at is null LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.BillID,
		&i.CustName,
		&i.Amount,
		&i.Admin,
		&i.TotAmount,
		&i.FeePartner,
		&i.FeePpob,
		&i.ValidFrom,
		&i.ValidTo,
		&i.CatID,
		&i.CatName,
		&i.ProdID,
		&i.ProdName,
		&i.PartnerID,
		&i.PartnerName,
		&i.ProviderID,
		&i.ProviderName,
		&i.Status,
		&i.ReqInqParams,
		&i.ResInqParams,
		&i.ReqPayParams,
		&i.ResPayParams,
		&i.ReqCmtParams,
		&i.ResCmtParams,
		&i.ReqAdvParams,
		&i.ResAdvParams,
		&i.ReqRevParams,
		&i.ResRevParams,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const getTransactionByTxID = `-- name: GetTransactionByTxID :one
SELECT id, tx_id, bill_id, cust_name, amount, admin, tot_amount, fee_partner, fee_ppob, valid_from, valid_to, cat_id, cat_name, prod_id, prod_name, partner_id, partner_name, provider_id, provider_name, status, req_inq_params, res_inq_params, req_pay_params, res_pay_params, req_cmt_params, res_cmt_params, req_adv_params, res_adv_params, req_rev_params, res_rev_params, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM "transactions"
WHERE tx_id = $1 AND deleted_at is null LIMIT 1
`

func (q *Queries) GetTransactionByTxID(ctx context.Context, txID string) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByTxID, txID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.BillID,
		&i.CustName,
		&i.Amount,
		&i.Admin,
		&i.TotAmount,
		&i.FeePartner,
		&i.FeePpob,
		&i.ValidFrom,
		&i.ValidTo,
		&i.CatID,
		&i.CatName,
		&i.ProdID,
		&i.ProdName,
		&i.PartnerID,
		&i.PartnerName,
		&i.ProviderID,
		&i.ProviderName,
		&i.Status,
		&i.ReqInqParams,
		&i.ResInqParams,
		&i.ReqPayParams,
		&i.ResPayParams,
		&i.ReqCmtParams,
		&i.ResCmtParams,
		&i.ReqAdvParams,
		&i.ResAdvParams,
		&i.ReqRevParams,
		&i.ResRevParams,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const listTransaction = `-- name: ListTransaction :many
SELECT id, tx_id, bill_id, cust_name, amount, admin, tot_amount, fee_partner, fee_ppob, valid_from, valid_to, cat_id, cat_name, prod_id, prod_name, partner_id, partner_name, provider_id, provider_name, status, req_inq_params, res_inq_params, req_pay_params, res_pay_params, req_cmt_params, res_cmt_params, req_adv_params, res_adv_params, req_rev_params, res_rev_params, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM "transactions"
WHERE deleted_at is null
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type ListTransactionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransaction(ctx context.Context, arg ListTransactionParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransaction, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.TxID,
			&i.BillID,
			&i.CustName,
			&i.Amount,
			&i.Admin,
			&i.TotAmount,
			&i.FeePartner,
			&i.FeePpob,
			&i.ValidFrom,
			&i.ValidTo,
			&i.CatID,
			&i.CatName,
			&i.ProdID,
			&i.ProdName,
			&i.PartnerID,
			&i.PartnerName,
			&i.ProviderID,
			&i.ProviderName,
			&i.Status,
			&i.ReqInqParams,
			&i.ResInqParams,
			&i.ReqPayParams,
			&i.ResPayParams,
			&i.ReqCmtParams,
			&i.ResCmtParams,
			&i.ReqAdvParams,
			&i.ResAdvParams,
			&i.ReqRevParams,
			&i.ResRevParams,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInactiveTransaction = `-- name: UpdateInactiveTransaction :one
UPDATE "transactions" SET deleted_by = $2, deleted_at = now() WHERE id = $1
RETURNING id, tx_id, bill_id, cust_name, amount, admin, tot_amount, fee_partner, fee_ppob, valid_from, valid_to, cat_id, cat_name, prod_id, prod_name, partner_id, partner_name, provider_id, provider_name, status, req_inq_params, res_inq_params, req_pay_params, res_pay_params, req_cmt_params, res_cmt_params, req_adv_params, res_adv_params, req_rev_params, res_rev_params, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateInactiveTransactionParams struct {
	ID        int64         `json:"id"`
	DeletedBy sql.NullInt64 `json:"deleted_by"`
}

func (q *Queries) UpdateInactiveTransaction(ctx context.Context, arg UpdateInactiveTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateInactiveTransaction, arg.ID, arg.DeletedBy)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.BillID,
		&i.CustName,
		&i.Amount,
		&i.Admin,
		&i.TotAmount,
		&i.FeePartner,
		&i.FeePpob,
		&i.ValidFrom,
		&i.ValidTo,
		&i.CatID,
		&i.CatName,
		&i.ProdID,
		&i.ProdName,
		&i.PartnerID,
		&i.PartnerName,
		&i.ProviderID,
		&i.ProviderName,
		&i.Status,
		&i.ReqInqParams,
		&i.ResInqParams,
		&i.ReqPayParams,
		&i.ResPayParams,
		&i.ReqCmtParams,
		&i.ResCmtParams,
		&i.ReqAdvParams,
		&i.ResAdvParams,
		&i.ReqRevParams,
		&i.ResRevParams,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE "transactions"
SET
    "status" = CASE
            WHEN $1::bool
                THEN $2
            ELSE status
            END,
    res_inq_params = CASE
               WHEN $3::bool
                THEN $4
               ELSE res_inq_params
        END,
    req_pay_params = CASE
                 WHEN $5::bool
                    THEN $6
                 ELSE req_pay_params
        END,
    res_pay_params = CASE
                 WHEN $7::bool
                    THEN $8
                 ELSE res_pay_params
        END,
    req_cmt_params = CASE
                    WHEN $9::bool
                    THEN $10
                    ELSE req_cmt_params
        END,
    res_cmt_params = CASE
                    WHEN $11::bool
                    THEN $12
                    ELSE res_cmt_params
        END,
    req_adv_params = CASE
                     WHEN $13::bool
                    THEN $14
                     ELSE req_adv_params
        END,
    res_adv_params = CASE
                   WHEN $15::bool
                    THEN $16
                   ELSE res_adv_params
        END,
    req_rev_params = CASE
                   WHEN $17::bool
                    THEN $18
                   ELSE req_rev_params
        END,
    updated_by = $19,
    updated_at = now()
WHERE
    id = $20
RETURNING id, tx_id, bill_id, cust_name, amount, admin, tot_amount, fee_partner, fee_ppob, valid_from, valid_to, cat_id, cat_name, prod_id, prod_name, partner_id, partner_name, provider_id, provider_name, status, req_inq_params, res_inq_params, req_pay_params, res_pay_params, req_cmt_params, res_cmt_params, req_adv_params, res_adv_params, req_rev_params, res_rev_params, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateTransactionParams struct {
	SetStatus       bool           `json:"set_status"`
	Status          string         `json:"status"`
	SetResInqParams bool           `json:"set_res_inq_params"`
	ResInqParams    sql.NullString `json:"res_inq_params"`
	SetReqPayParams bool           `json:"set_req_pay_params"`
	ReqPayParams    sql.NullString `json:"req_pay_params"`
	SetResPayParams bool           `json:"set_res_pay_params"`
	ResPayParams    sql.NullString `json:"res_pay_params"`
	SetReqCmtParams bool           `json:"set_req_cmt_params"`
	ReqCmtParams    sql.NullString `json:"req_cmt_params"`
	SetResCmtParams bool           `json:"set_res_cmt_params"`
	ResCmtParams    sql.NullString `json:"res_cmt_params"`
	SetReqAdvParams bool           `json:"set_req_adv_params"`
	ReqAdvParams    sql.NullString `json:"req_adv_params"`
	SetResAdvParams bool           `json:"set_res_adv_params"`
	ResAdvParams    sql.NullString `json:"res_adv_params"`
	SetReqRevParams bool           `json:"set_req_rev_params"`
	ReqRevParams    sql.NullString `json:"req_rev_params"`
	UpdatedBy       sql.NullInt64  `json:"updated_by"`
	ID              int64          `json:"id"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.SetStatus,
		arg.Status,
		arg.SetResInqParams,
		arg.ResInqParams,
		arg.SetReqPayParams,
		arg.ReqPayParams,
		arg.SetResPayParams,
		arg.ResPayParams,
		arg.SetReqCmtParams,
		arg.ReqCmtParams,
		arg.SetResCmtParams,
		arg.ResCmtParams,
		arg.SetReqAdvParams,
		arg.ReqAdvParams,
		arg.SetResAdvParams,
		arg.ResAdvParams,
		arg.SetReqRevParams,
		arg.ReqRevParams,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.TxID,
		&i.BillID,
		&i.CustName,
		&i.Amount,
		&i.Admin,
		&i.TotAmount,
		&i.FeePartner,
		&i.FeePpob,
		&i.ValidFrom,
		&i.ValidTo,
		&i.CatID,
		&i.CatName,
		&i.ProdID,
		&i.ProdName,
		&i.PartnerID,
		&i.PartnerName,
		&i.ProviderID,
		&i.ProviderName,
		&i.Status,
		&i.ReqInqParams,
		&i.ResInqParams,
		&i.ReqPayParams,
		&i.ResPayParams,
		&i.ReqCmtParams,
		&i.ResCmtParams,
		&i.ReqAdvParams,
		&i.ResAdvParams,
		&i.ReqRevParams,
		&i.ResRevParams,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}
