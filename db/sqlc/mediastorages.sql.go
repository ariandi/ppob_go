// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: mediastorages.sql

package db

import (
	"context"
	"database/sql"
)

const createMediaStorage = `-- name: CreateMediaStorage :one
INSERT INTO madiastorages (
    sec_id, tab_id, name, type, content, created_by
) values (
             $1, $2, $3, $4, $5, $6
         ) RETURNING id, sec_id, tab_id, name, type, content, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type CreateMediaStorageParams struct {
	SecID     string        `json:"sec_id"`
	TabID     string        `json:"tab_id"`
	Name      string        `json:"name"`
	Type      string        `json:"type"`
	Content   string        `json:"content"`
	CreatedBy sql.NullInt64 `json:"created_by"`
}

func (q *Queries) CreateMediaStorage(ctx context.Context, arg CreateMediaStorageParams) (Madiastorage, error) {
	row := q.db.QueryRowContext(ctx, createMediaStorage,
		arg.SecID,
		arg.TabID,
		arg.Name,
		arg.Type,
		arg.Content,
		arg.CreatedBy,
	)
	var i Madiastorage
	err := row.Scan(
		&i.ID,
		&i.SecID,
		&i.TabID,
		&i.Name,
		&i.Type,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const deleteMediaStorage = `-- name: DeleteMediaStorage :exec
DELETE FROM madiastorages
WHERE id = $1
`

func (q *Queries) DeleteMediaStorage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMediaStorage, id)
	return err
}

const getMediaStorage = `-- name: GetMediaStorage :one
SELECT id, sec_id, tab_id, name, type, content, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM madiastorages
WHERE deleted_at is null
AND (CASE WHEN $1::bool THEN id = $2 ELSE TRUE END)
AND (CASE WHEN $3::bool THEN sec_id = $4 ELSE TRUE END)
AND (CASE WHEN $5::bool THEN tab_id = $6 ELSE TRUE END)
LIMIT 1
`

type GetMediaStorageParams struct {
	IsID  bool   `json:"is_id"`
	ID    int64  `json:"id"`
	IsSec bool   `json:"is_sec"`
	SecID string `json:"sec_id"`
	IsTab bool   `json:"is_tab"`
	TabID string `json:"tab_id"`
}

func (q *Queries) GetMediaStorage(ctx context.Context, arg GetMediaStorageParams) (Madiastorage, error) {
	row := q.db.QueryRowContext(ctx, getMediaStorage,
		arg.IsID,
		arg.ID,
		arg.IsSec,
		arg.SecID,
		arg.IsTab,
		arg.TabID,
	)
	var i Madiastorage
	err := row.Scan(
		&i.ID,
		&i.SecID,
		&i.TabID,
		&i.Name,
		&i.Type,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const listMediaStorage = `-- name: ListMediaStorage :many
SELECT id, sec_id, tab_id, name, type, content, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by FROM madiastorages
WHERE deleted_at is null
AND (CASE WHEN $3::bool THEN sec_id = $4 ELSE TRUE END)
AND (CASE WHEN $5::bool THEN tab_id = $6 ELSE TRUE END)
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListMediaStorageParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	IsSec  bool   `json:"is_sec"`
	SecID  string `json:"sec_id"`
	IsTab  bool   `json:"is_tab"`
	TabID  string `json:"tab_id"`
}

func (q *Queries) ListMediaStorage(ctx context.Context, arg ListMediaStorageParams) ([]Madiastorage, error) {
	rows, err := q.db.QueryContext(ctx, listMediaStorage,
		arg.Limit,
		arg.Offset,
		arg.IsSec,
		arg.SecID,
		arg.IsTab,
		arg.TabID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Madiastorage{}
	for rows.Next() {
		var i Madiastorage
		if err := rows.Scan(
			&i.ID,
			&i.SecID,
			&i.TabID,
			&i.Name,
			&i.Type,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInactiveMediaStorage = `-- name: UpdateInactiveMediaStorage :one
UPDATE madiastorages SET deleted_by = $2, deleted_at = now() WHERE id = $1
    RETURNING id, sec_id, tab_id, name, type, content, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateInactiveMediaStorageParams struct {
	ID        int64         `json:"id"`
	DeletedBy sql.NullInt64 `json:"deleted_by"`
}

func (q *Queries) UpdateInactiveMediaStorage(ctx context.Context, arg UpdateInactiveMediaStorageParams) (Madiastorage, error) {
	row := q.db.QueryRowContext(ctx, updateInactiveMediaStorage, arg.ID, arg.DeletedBy)
	var i Madiastorage
	err := row.Scan(
		&i.ID,
		&i.SecID,
		&i.TabID,
		&i.Name,
		&i.Type,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}

const updateMediaStorage = `-- name: UpdateMediaStorage :one
UPDATE madiastorages
SET
    name = CASE
            WHEN $1::bool
                THEN $2
            ELSE name
            END,
    type = CASE
              WHEN $3::bool
                THEN $4
              ELSE type
              END,
    updated_by = $5,
    updated_at = now()
WHERE
id = $6
RETURNING id, sec_id, tab_id, name, type, content, created_at, updated_at, deleted_at, created_by, updated_by, deleted_by
`

type UpdateMediaStorageParams struct {
	SetName   bool          `json:"set_name"`
	Name      string        `json:"name"`
	SetType   bool          `json:"set_type"`
	Type      string        `json:"type"`
	UpdatedBy sql.NullInt64 `json:"updated_by"`
	ID        int64         `json:"id"`
}

func (q *Queries) UpdateMediaStorage(ctx context.Context, arg UpdateMediaStorageParams) (Madiastorage, error) {
	row := q.db.QueryRowContext(ctx, updateMediaStorage,
		arg.SetName,
		arg.Name,
		arg.SetType,
		arg.Type,
		arg.UpdatedBy,
		arg.ID,
	)
	var i Madiastorage
	err := row.Scan(
		&i.ID,
		&i.SecID,
		&i.TabID,
		&i.Name,
		&i.Type,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.DeletedBy,
	)
	return i, err
}
